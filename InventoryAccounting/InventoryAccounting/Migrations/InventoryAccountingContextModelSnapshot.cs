// <auto-generated />
using System;
using InventoryAccounting.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InventoryAccounting.Migrations
{
    [DbContext(typeof(InventoryAccountingContext))]
    partial class InventoryAccountingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InventoryAccounting.Models.DB.Acts", b =>
                {
                    b.Property<int>("Id");

                    b.Property<DateTime>("CompilationDate")
                        .HasColumnType("date");

                    b.Property<int>("ContractNumber");

                    b.HasKey("Id");

                    b.HasIndex("ContractNumber");

                    b.ToTable("Acts");
                });

            modelBuilder.Entity("InventoryAccounting.Models.DB.CompanyName", b =>
                {
                    b.Property<int>("Unp")
                        .HasColumnName("UNP");

                    b.Property<string>("Address")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("DirectorsName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("DirectorsPhone")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Unp");

                    b.ToTable("CompanyName");
                });

            modelBuilder.Entity("InventoryAccounting.Models.DB.Contracts", b =>
                {
                    b.Property<int>("ContractNumber");

                    b.Property<int>("CompanyUnp")
                        .HasColumnName("CompanyUNP");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.HasKey("ContractNumber");

                    b.HasIndex("CompanyUnp");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("InventoryAccounting.Models.DB.ResponsiblePersons", b =>
                {
                    b.Property<int>("PersonnelNumber");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateOfEmployment")
                        .HasColumnType("date");

                    b.Property<string>("Education")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PassportDetails")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("Post")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("PersonnelNumber");

                    b.ToTable("ResponsiblePersons");
                });

            modelBuilder.Entity("InventoryAccounting.Models.DB.Rooms", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("Floor");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int>("Number");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("InventoryAccounting.Models.DB.Tmc", b =>
                {
                    b.Property<int>("InventoryNumber");

                    b.Property<int?>("ActId");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("FactoryNumber");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<int>("PesponsiblePersonNumber");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("date");

                    b.Property<Guid>("RoomId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("WarrantyDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("WriteOffDate")
                        .HasColumnType("date");

                    b.HasKey("InventoryNumber");

                    b.HasIndex("ActId");

                    b.HasIndex("PesponsiblePersonNumber");

                    b.HasIndex("RoomId");

                    b.ToTable("TMC");
                });

            modelBuilder.Entity("InventoryAccounting.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("InventoryAccounting.Models.DB.Acts", b =>
                {
                    b.HasOne("InventoryAccounting.Models.DB.Contracts", "ContractNumberNavigation")
                        .WithMany("Acts")
                        .HasForeignKey("ContractNumber")
                        .HasConstraintName("FK_Acts_Contracts");
                });

            modelBuilder.Entity("InventoryAccounting.Models.DB.Contracts", b =>
                {
                    b.HasOne("InventoryAccounting.Models.DB.CompanyName", "CompanyUnpNavigation")
                        .WithMany("Contracts")
                        .HasForeignKey("CompanyUnp")
                        .HasConstraintName("FK_Contracts_CompanyName");
                });

            modelBuilder.Entity("InventoryAccounting.Models.DB.Tmc", b =>
                {
                    b.HasOne("InventoryAccounting.Models.DB.Acts", "Act")
                        .WithMany("Tmc")
                        .HasForeignKey("ActId")
                        .HasConstraintName("FK_TMC_Acts");

                    b.HasOne("InventoryAccounting.Models.DB.ResponsiblePersons", "PesponsiblePersonNumberNavigation")
                        .WithMany("Tmc")
                        .HasForeignKey("PesponsiblePersonNumber")
                        .HasConstraintName("FK_InventoryName_ResponsiblePersons");

                    b.HasOne("InventoryAccounting.Models.DB.Rooms", "Room")
                        .WithMany("Tmc")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FK_TMC_Rooms");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InventoryAccounting.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InventoryAccounting.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InventoryAccounting.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InventoryAccounting.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
